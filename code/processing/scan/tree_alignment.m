nameIn          = onganised_dir;
fileInRef       = [nameIn '2022-01-29_12-57-43_scan02.ply']; % this is the reference and does not change

roi             = [10.5 12 55 57.5 2.5 7]; % do not limit the search area - fence
roi2            = [40.4 40.9 93.4 93.9 7 30]; % telegraph pole
roi3            = [25, 60, 50, 72, 0, 10]; % random points in center

ans1 = [10.5 55 1;...
12  57.5 1; ...
40.4 93.4 1;...
40.9 93.9 1;...
40.4 93.4 1;...
40.9 93.9 2];

roi_format = [num2str(roi(1)) ':' num2str(roi(3)) ':' num2str(roi(5)) ':' ...
    num2str(roi(2)) ':' num2str(roi(4)) ':' num2str(roi(6))];

roi_format2 = [num2str(roi2(1)) ':' num2str(roi2(3)) ':' num2str(roi2(5)) ':' ...
    num2str(roi2(2)) ':' num2str(roi2(4)) ':' num2str(roi2(6))];

roi_format3 = [num2str(roi3(1)) ':' num2str(roi3(3)) ':' num2str(roi3(5)) ':' ...
    num2str(roi3(2)) ':' num2str(roi3(4)) ':' num2str(roi3(6))];

% load in the target cloud for segmentation + export once complete
listingX        = dir(nameIn);
listingNameX    = {};
for x = 1:length(listingX)
    listingNameX(x,1) = cellstr(listingX(x).name);
end
clear x
fileInY         = char(listingNameX(contains(listingNameX,[folderName '_scan02.ply'])));

% segment/crop using CC
cc_command = [ccpath ' ' ...
    '-SILENT '...
    '-LOG_FILE ' [nameIn fileInY(1:end-4) '_segment_logfile.txt '] ...
    '-C_EXPORT_FMT PLY '...
    '-NO_TIMESTAMP ' ...
    '-O ' fileInRef ' '...
    '-O ' [nameIn fileInY] ' '...
    '-CROP ' roi_format ' '  ...
    ];
[status,cmdout] = system(cc_command);

% move the files
files_to_move = { ...
    [fileInRef(1:end-4) '_CROPPED.ply']; ...
    [nameIn fileInY(1:end-4) '_CROPPED.ply']; ...
    };

move_location = { ...
    [fileInRef(1:end-4) '_CROPPED1.ply']; ...
    [nameIn fileInY(1:end-4) '_CROPPED1.ply']; ...
    };

stopper = 0;
try % catch in case no data
    for c = 1:length(files_to_move)
        oldFileNameSingle = char(files_to_move(c,1));
        newFileNameSingle = char(move_location(c,1));
        movefile(oldFileNameSingle,newFileNameSingle,'f');
    end
catch
    stopper = 1;
end

if stopper == 0
    % segment/crop using CC
    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-LOG_FILE ' [nameIn fileInY(1:end-4) '_segment_logfile.txt '] ...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' fileInRef ' '...
        '-O ' [nameIn fileInY] ' '...
        '-CROP ' roi_format2 ' '  ...
        ];
    [status,cmdout] = system(cc_command);

    % move the files
    files_to_move = { ...
        [fileInRef(1:end-4) '_CROPPED.ply']; ...
        [nameIn fileInY(1:end-4) '_CROPPED.ply']; ...
        };

    move_location = { ...
        [fileInRef(1:end-4) '_CROPPED2.ply']; ...
        [nameIn fileInY(1:end-4) '_CROPPED2.ply']; ...
        };
end

try % catch in case no data
    for c = 1:length(files_to_move)
        oldFileNameSingle = char(files_to_move(c,1));
        newFileNameSingle = char(move_location(c,1));
        movefile(oldFileNameSingle,newFileNameSingle,'f');
    end
catch
    stopper = 1;
end

if stopper == 0
    % segment/crop using CC
    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-LOG_FILE ' [nameIn fileInY(1:end-4) '_segment_logfile.txt '] ...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' fileInRef ' '...
        '-O ' [nameIn fileInY] ' '...
        '-CROP ' roi_format3 ' '  ...
        ];
    [status,cmdout] = system(cc_command);

    % move the files
    files_to_move = { ...
        [fileInRef(1:end-4) '_CROPPED.ply']; ...
        [nameIn fileInY(1:end-4) '_CROPPED.ply']; ...
        };

    move_location = { ...
        [fileInRef(1:end-4) '_CROPPED3.ply']; ...
        [nameIn fileInY(1:end-4) '_CROPPED3.ply']; ...
        };

    for c = 1:length(files_to_move)
        oldFileNameSingle = char(files_to_move(c,1));
        newFileNameSingle = char(move_location(c,1));
        movefile(oldFileNameSingle,newFileNameSingle,'f');
    end

    % segment/crop using CC

    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-LOG_FILE ' [nameIn fileInY(1:end-4) '_merge_logfile.txt '] ...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' [nameIn fileInY(1:end-4) '_CROPPED1.ply'] ' '...
        '-O ' [nameIn fileInY(1:end-4) '_CROPPED2.ply'] ' '...
        '-O ' [nameIn fileInY(1:end-4) '_CROPPED3.ply'] ' '...
        '-MERGE_CLOUDS ' ...
        ];
    [status,cmdout] = system(cc_command);

    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-LOG_FILE ' [nameIn fileInY(1:end-4) '_merge_logfile.txt '] ...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' [fileInRef(1:end-4) '_CROPPED1.ply'] ' '...
        '-O ' [fileInRef(1:end-4) '_CROPPED2.ply'] ' '...
        '-O ' [fileInRef(1:end-4) '_CROPPED3.ply'] ' '...
        '-MERGE_CLOUDS ' ...
        ];
    [status,cmdout] = system(cc_command);


    % algn the clouds using cloud compare
    % the first cloud acts as the reference
    % newly aligned cloud is exported as saveName03
    limiter = 10000000;
    ref_cloud_seg = [fileInRef(1:end-4) '_CROPPED1_MERGED.ply'];
    target_cloud_seg = [nameIn fileInY(1:end-4) '_CROPPED1_MERGED.ply'];

    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-LOG_FILE ' [target_cloud_seg(1:end-4) '_logfile.txt '] ...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' ref_cloud_seg ' '...
        '-O ' target_cloud_seg ' '...
        '-ICP '...
        '-MIN_ERROR_DIFF 1e-8 '...
        '-RANDOM_SAMPLING_LIMIT ' num2str(limiter) ' ' ...
        '-OVERLAP 90 '...
        '-REFERENCE_IS_FIRST '
        ];
    [status,cmdout] = system(cc_command);


    % Move the newly created files
    nameIn2         = onganised_dir;
    listingX        = dir(nameIn);
    listingNameX    = {};
    for x = 1:length(listingX)
        listingNameX(x,1) = cellstr(listingX(x).name);
    end
    clear x

    % bring in the first scan which had been aligned to scan02
    fileInZ         = contains(listingNameX,['CROPPED']);
    files_tmp       = listingNameX(fileInZ);

    for c = 1:length(files_tmp)
        oldFileNameSingle = [nameIn2 char(files_tmp(c,1))];
        newFileNameSingle = [exported_dir char(files_tmp(c,1))];
        movefile(oldFileNameSingle,newFileNameSingle,'f');
    end


    % Bring in the other part of the scan (01), which was previously
    % aligned to scan 02.
    nameIn2         = exported_dir;
    listingX        = dir(nameIn2);
    listingNameX    = {};
    for x = 1:length(listingX)
        listingNameX(x,1) = cellstr(listingX(x).name);
    end
    clear x

    % bring in the first scan which had been aligned to scan02
    fileInZ         = contains(listingNameX,[folderName '_scan01_trans_MATCHED.ply']);
    fileInZ         = listingNameX(fileInZ);
    fileInZ         = char(fileInZ(1));

    % bring in the first scan which had been aligned to scan02
    fileInA         = contains(listingNameX,[folderName '_scan02.ply']);
    fileInA         = listingNameX(fileInA);
    fileInA         = char(fileInA(1));


    % bring in the rotation matrix from the alignment above
    substring       = [folderName '_scan02_CROPPED1_MERGED_REGISTRATION_MATRIX'];
    Index           = find(contains(listingNameX,substring));
    Index           = min(Index);
    fileForImport   = char(listingNameX(Index));


    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-LOG_FILE ' [target_cloud_seg(1:end-4) '_rotation_logfile.txt '] ...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' [exported_dir fileInA] ' '... %scan 2
        '-O ' [exported_dir fileInZ] ' '...  %scan 1
        '-APPLY_TRANS ' [exported_dir fileForImport] ' ' ...
        ];
    [status,cmdout] = system(cc_command);


    % Move all of the finalised files
    files_to_move = { ...
        [exported_dir fileInZ(1:end-4) '_TRANSFORMED.ply']; ...
        [exported_dir fileInY(1:end-4) '_TRANSFORMED.ply']; ...
        };


    move_location = { ...
        [processed_dir fileInZ(1:end-4) '_TRANSFORMED.ply']; ...
        [processed_dir fileInY(1:end-4) '_TRANSFORMED.ply']; ...
        };

    for c = 1:length(files_to_move)
        oldFileNameSingle = char(files_to_move(c,1));
        newFileNameSingle = char(move_location(c,1));
        movefile(oldFileNameSingle,newFileNameSingle,'f');
        
        % optional export as las file
        %temp_pts    = pcread(newFileNameSingle); % also export as laz
        %lasWriter   = lasFileWriter([newFileNameSingle(1:end-4) '.las']);
        %writePointCloud(lasWriter,temp_pts);
        %clear temp_pts
    end

    cc_command = [ccpath ' ' ...
        '-SILENT '...
        '-C_EXPORT_FMT PLY '...
        '-NO_TIMESTAMP ' ...
        '-O ' [processed_dir fileInZ(1:end-4) '_TRANSFORMED.ply'] ' '...
        '-O ' [processed_dir fileInY(1:end-4) '_TRANSFORMED.ply'] ' '...
        '-MERGE_CLOUDS ' ...
        ];
    [status,cmdout] = system(cc_command);

    % Move all of the finalised files
    files_to_move = { ...
        [processed_dir fileInZ(1:end-4) '_TRANSFORMED_MERGED.ply']; ...
        };

    move_location = { ...
        [processed_dir fileInZ(1:19) '_MERGED.ply']; ...
        };

    for c = 1:length(files_to_move)
        oldFileNameSingle = char(files_to_move(c,1));
        newFileNameSingle = char(move_location(c,1));
        movefile(oldFileNameSingle,newFileNameSingle,'f');

        % optional export as las file
        %temp_pts    = pcread(newFileNameSingle); % also export as laz
        %lasWriter   = lasFileWriter([newFileNameSingle(1:end-4) '.las']);
        %writePointCloud(lasWriter,temp_pts);
        %clear temp_pts
    end

end
